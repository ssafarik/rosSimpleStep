/* Auto-generated by genmsg_cpp for file /home/sweta/src.git/rosSimpleStep/srv/SrvPark.srv */
#ifndef ROSSIMPLESTEP_SERVICE_SRVPARK_H
#define ROSSIMPLESTEP_SERVICE_SRVPARK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace rosSimpleStep
{
template <class ContainerAllocator>
struct SrvParkRequest_ {
  typedef SrvParkRequest_<ContainerAllocator> Type;

  SrvParkRequest_()
  {
  }

  SrvParkRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::rosSimpleStep::SrvParkRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosSimpleStep::SrvParkRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SrvParkRequest
typedef  ::rosSimpleStep::SrvParkRequest_<std::allocator<void> > SrvParkRequest;

typedef boost::shared_ptr< ::rosSimpleStep::SrvParkRequest> SrvParkRequestPtr;
typedef boost::shared_ptr< ::rosSimpleStep::SrvParkRequest const> SrvParkRequestConstPtr;


template <class ContainerAllocator>
struct SrvParkResponse_ {
  typedef SrvParkResponse_<ContainerAllocator> Type;

  SrvParkResponse_()
  : bStatus(false)
  {
  }

  SrvParkResponse_(const ContainerAllocator& _alloc)
  : bStatus(false)
  {
  }

  typedef uint8_t _bStatus_type;
  uint8_t bStatus;


  typedef boost::shared_ptr< ::rosSimpleStep::SrvParkResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosSimpleStep::SrvParkResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SrvParkResponse
typedef  ::rosSimpleStep::SrvParkResponse_<std::allocator<void> > SrvParkResponse;

typedef boost::shared_ptr< ::rosSimpleStep::SrvParkResponse> SrvParkResponsePtr;
typedef boost::shared_ptr< ::rosSimpleStep::SrvParkResponse const> SrvParkResponseConstPtr;

struct SrvPark
{

typedef SrvParkRequest Request;
typedef SrvParkResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SrvPark
} // namespace rosSimpleStep

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rosSimpleStep::SrvParkRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rosSimpleStep::SrvParkRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rosSimpleStep::SrvParkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::rosSimpleStep::SrvParkRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::rosSimpleStep::SrvParkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosSimpleStep/SrvParkRequest";
  }

  static const char* value(const  ::rosSimpleStep::SrvParkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosSimpleStep::SrvParkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::rosSimpleStep::SrvParkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rosSimpleStep::SrvParkRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rosSimpleStep::SrvParkResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rosSimpleStep::SrvParkResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rosSimpleStep::SrvParkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3e18d87dd8087d83731a8e3c5780564e";
  }

  static const char* value(const  ::rosSimpleStep::SrvParkResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3e18d87dd8087d83ULL;
  static const uint64_t static_value2 = 0x731a8e3c5780564eULL;
};

template<class ContainerAllocator>
struct DataType< ::rosSimpleStep::SrvParkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosSimpleStep/SrvParkResponse";
  }

  static const char* value(const  ::rosSimpleStep::SrvParkResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosSimpleStep::SrvParkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool bStatus\n\
\n\
\n\
";
  }

  static const char* value(const  ::rosSimpleStep::SrvParkResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rosSimpleStep::SrvParkResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosSimpleStep::SrvParkRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SrvParkRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosSimpleStep::SrvParkResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.bStatus);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SrvParkResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rosSimpleStep::SrvPark> {
  static const char* value() 
  {
    return "3e18d87dd8087d83731a8e3c5780564e";
  }

  static const char* value(const rosSimpleStep::SrvPark&) { return value(); } 
};

template<>
struct DataType<rosSimpleStep::SrvPark> {
  static const char* value() 
  {
    return "rosSimpleStep/SrvPark";
  }

  static const char* value(const rosSimpleStep::SrvPark&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rosSimpleStep::SrvParkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3e18d87dd8087d83731a8e3c5780564e";
  }

  static const char* value(const rosSimpleStep::SrvParkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rosSimpleStep::SrvParkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosSimpleStep/SrvPark";
  }

  static const char* value(const rosSimpleStep::SrvParkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rosSimpleStep::SrvParkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3e18d87dd8087d83731a8e3c5780564e";
  }

  static const char* value(const rosSimpleStep::SrvParkResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rosSimpleStep::SrvParkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosSimpleStep/SrvPark";
  }

  static const char* value(const rosSimpleStep::SrvParkResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROSSIMPLESTEP_SERVICE_SRVPARK_H

