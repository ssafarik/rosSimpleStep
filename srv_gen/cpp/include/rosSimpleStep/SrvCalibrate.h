/* Auto-generated by genmsg_cpp for file /home/rancher/src.git/rosSimpleStep/srv/SrvCalibrate.srv */
#ifndef ROSSIMPLESTEP_SERVICE_SRVCALIBRATE_H
#define ROSSIMPLESTEP_SERVICE_SRVCALIBRATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace rosSimpleStep
{
template <class ContainerAllocator>
struct SrvCalibrateRequest_ {
  typedef SrvCalibrateRequest_<ContainerAllocator> Type;

  SrvCalibrateRequest_()
  : direction(0)
  , posOrigin(0.0)
  , posPark(0.0)
  , findIndex(false)
  {
  }

  SrvCalibrateRequest_(const ContainerAllocator& _alloc)
  : direction(0)
  , posOrigin(0.0)
  , posPark(0.0)
  , findIndex(false)
  {
  }

  typedef int32_t _direction_type;
  int32_t direction;

  typedef float _posOrigin_type;
  float posOrigin;

  typedef float _posPark_type;
  float posPark;

  typedef uint8_t _findIndex_type;
  uint8_t findIndex;


  typedef boost::shared_ptr< ::rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SrvCalibrateRequest
typedef  ::rosSimpleStep::SrvCalibrateRequest_<std::allocator<void> > SrvCalibrateRequest;

typedef boost::shared_ptr< ::rosSimpleStep::SrvCalibrateRequest> SrvCalibrateRequestPtr;
typedef boost::shared_ptr< ::rosSimpleStep::SrvCalibrateRequest const> SrvCalibrateRequestConstPtr;


template <class ContainerAllocator>
struct SrvCalibrateResponse_ {
  typedef SrvCalibrateResponse_<ContainerAllocator> Type;

  SrvCalibrateResponse_()
  : position(0.0)
  {
  }

  SrvCalibrateResponse_(const ContainerAllocator& _alloc)
  : position(0.0)
  {
  }

  typedef float _position_type;
  float position;


  typedef boost::shared_ptr< ::rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SrvCalibrateResponse
typedef  ::rosSimpleStep::SrvCalibrateResponse_<std::allocator<void> > SrvCalibrateResponse;

typedef boost::shared_ptr< ::rosSimpleStep::SrvCalibrateResponse> SrvCalibrateResponsePtr;
typedef boost::shared_ptr< ::rosSimpleStep::SrvCalibrateResponse const> SrvCalibrateResponseConstPtr;

struct SrvCalibrate
{

typedef SrvCalibrateRequest Request;
typedef SrvCalibrateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SrvCalibrate
} // namespace rosSimpleStep

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "122720100147f8e7fccdf289e511bf0b";
  }

  static const char* value(const  ::rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x122720100147f8e7ULL;
  static const uint64_t static_value2 = 0xfccdf289e511bf0bULL;
};

template<class ContainerAllocator>
struct DataType< ::rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosSimpleStep/SrvCalibrateRequest";
  }

  static const char* value(const  ::rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 direction\n\
float32 posOrigin\n\
float32 posPark\n\
bool findIndex\n\
\n\
";
  }

  static const char* value(const  ::rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e4e11b3af29ed247b2bd150d3f4540f9";
  }

  static const char* value(const  ::rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe4e11b3af29ed247ULL;
  static const uint64_t static_value2 = 0xb2bd150d3f4540f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosSimpleStep/SrvCalibrateResponse";
  }

  static const char* value(const  ::rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 position\n\
\n\
\n\
";
  }

  static const char* value(const  ::rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.direction);
    stream.next(m.posOrigin);
    stream.next(m.posPark);
    stream.next(m.findIndex);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SrvCalibrateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SrvCalibrateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rosSimpleStep::SrvCalibrate> {
  static const char* value() 
  {
    return "e6b1e4f347387c9840fcdbc0affbf11b";
  }

  static const char* value(const rosSimpleStep::SrvCalibrate&) { return value(); } 
};

template<>
struct DataType<rosSimpleStep::SrvCalibrate> {
  static const char* value() 
  {
    return "rosSimpleStep/SrvCalibrate";
  }

  static const char* value(const rosSimpleStep::SrvCalibrate&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e6b1e4f347387c9840fcdbc0affbf11b";
  }

  static const char* value(const rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosSimpleStep/SrvCalibrate";
  }

  static const char* value(const rosSimpleStep::SrvCalibrateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e6b1e4f347387c9840fcdbc0affbf11b";
  }

  static const char* value(const rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosSimpleStep/SrvCalibrate";
  }

  static const char* value(const rosSimpleStep::SrvCalibrateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROSSIMPLESTEP_SERVICE_SRVCALIBRATE_H

